////////////////////////////////////////////////////////////////////////////////////  Adnan Babar, Siemens Open Web video Player// //  NOTICE: AMAZE PLC does not permits you to use, modify, and distribute this //          file//////////////////////////////////////////////////////////////////////////////////package src{	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.Event;	//--------------------------------------------------------------------------	/**	        *  ActionScript 3.0 Application 	        *  18 Feb 2008	        *	        *  This document class receives the url to the XML video file from 	        *  the html page that embeds the swf. It then loads and parses the	        *  XML file to initialize the video player.	        *	        */	//--------------------------------------------------------------------------	public class PlayList extends Sprite	{		static private  var __instance:PlayList;		private var _listItemContainer:Sprite = new Sprite;		private var _playlistArray:Array = new Array;		private var _playSelectedArray:Array = new Array;		private var _playAllArray:Array = new Array;		private var _firstTime:Boolean = true;		private var _playButtonsContainer:Sprite = new Sprite;		private var _playAll:PlayButton;		private var _playSelected:PlayButton;		private var _isDisable:Boolean = false;		private var _playlistURL:String;		private var _playlistXML:XmlLoader;				private var _itemsPerRow:Number = 3;		private var j:int = 0;		private var _horizSpace:Number = 15;		private var _vertSpace:Number = 19;		private var _currentRow:Number = 0;		private var _currentColumn:Number = 0;		public function PlayList(PlayListEnforcer:PlayListEnforcer)		{			var select:Text = new Text();			select.x = -3;			select.y = -5			addChild(select)			_listItemContainer.y = 30;			addChild(_listItemContainer);			_playButtonsContainer.x = 70;			_playButtonsContainer.y = 197;			addChild(_playButtonsContainer);		}		public static function getInstance():PlayList		{			if (PlayList.__instance == null)			{				PlayList.__instance=new PlayList(new PlayListEnforcer);			}			return PlayList.__instance;		}		public function createPlayList(xmlURL:String)		{			_playlistURL = xmlURL;			if (_firstTime)			{				createInterface();			}			else			{				clearButtons();			}		}		private function createInterface()		{			_firstTime = false;			_playlistXML = new XmlLoader(_playlistURL);			_playlistXML.addEventListener(Event.COMPLETE, handleLoadedXML);		}		private function handleLoadedXML(event:Event)		{			createListItem();			createPlayButtons();		}		private function createListItem()		{			var xml:XML = _playlistXML.xml;			var xmlList:XMLList = xml.button;			for (var i:int = 0; i < xmlList.length(); i++)			{				var button:ListItem = new ListItem(xmlList[i].@id, xmlList[i].@imageURL,				   xmlList[i].@videoURL );				_playAllArray.push(button);							if (!(j % _itemsPerRow))			{				_currentColumn = 0;				_currentRow++;			}			else			{				_currentColumn++;			}			button.x = Math.round((_currentColumn * 160) + ( _horizSpace * _currentColumn));			button.y = Math.round((_currentRow -1) * 69) + (_vertSpace * (_currentRow-1));			_listItemContainer.addChild(button);			j++;							}//end for		}//end createListItem		private function clearButtons()		{			for (var i:int = 0; i < _playSelectedArray.length; i++)			{				_playSelectedArray[i].enableButton();			}			_playSelectedArray.splice(0,_playSelectedArray.length);			disablePlaySelected();		}// clearButton		public function addListItem(listItem:ListItem)		{			enablePlaySelected();			_playSelectedArray.push(listItem);			if (_playSelectedArray.length == 3)			{				trace(_playSelectedArray);			}		}		public function removeListItem(listItem:ListItem)		{			for (var i:int = 0; i < _playSelectedArray.length; i++)			{				if (_playSelectedArray[i] == listItem)				{					_playSelectedArray.splice(i,1);				}			}			checkPlayList();		}		private function checkPlayList()		{			if (_playSelectedArray.length <=0)			{				disablePlaySelected();			}		}		private function createPlayButtons()		{			_playSelected = new PlayButton(1,"Play my selected features", 0x00CC00);			_playSelected.addEventListener(CustomEventDispatcher.GET_ID, onId);			_playAll = new PlayButton(2,"Play all features", 0x00CC00);			_playAll.x = _playAll.width + 20;			_playAll.addEventListener(CustomEventDispatcher.GET_ID, onId);			_playButtonsContainer.addChild(_playSelected);			_playButtonsContainer.addChild(_playAll);			disablePlaySelected();		}		private function enablePlaySelected()		{			if (_isDisable)			{				_isDisable = false;				_playSelected.addEventListener(CustomEventDispatcher.GET_ID, onId);				_playSelected.mouseEnabled = true;				_playSelected.pulsate();				_playSelected.alpha = 1;			}		}		private function disablePlaySelected()		{			_isDisable= true;			_playSelected.removeEventListener(CustomEventDispatcher.GET_ID, onId);			_playSelected.mouseEnabled = false;			_playSelected.alpha = 0.5;		}		private function onId(event:CustomEventDispatcher)		{			_playSelected.disablePulsate()			switch (event.buttonId)			{				case 1 :                   					Global.getInstance().initializePlayList(_playSelectedArray);					_playSelected.disablePulsate()					break;				case 2 :					Global.getInstance().initializePlayList(_playAllArray);					break;			}//end switch						clearInterface();		}				public function clearInterface()		{			clearButtons();			Container.getInstance().removeDisplayObject();			_playSelected.disablePulsate()		}		public function playList(playlist:Array)		{			_playlistArray = playlist;			trace(_playlistArray);			Global.getInstance().initializePlayList(_playlistArray)		}	}//end class}//end packageclass PlayListEnforcer{}