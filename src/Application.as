package src{	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.StageDisplayState;	import flash.events.FullScreenEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.utils.Timer;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.system.*;	public class Application extends Sprite	{		private var _flvURL;		String;//holds video url		private var _imageURL:String;//holds image url		private var _nam:String;//holds name		private var _email:String;//holds email		private var _hotelDomain:String;//holds hotel domain		private var _duration:Number;//holds total video time in ms		private var _width:Number;		private var _height:Number;		private var _fullScreen:Boolean = false;// check if fullscreen is on/off		private var videoControls:MovieClip;// controlls movieclip		private var loaderContext:LoaderContext;// to sort security issues		public function Application()		{			init();		}		private function init()		{			securitySandbox();// allow third party domain to load image and video from 			loadFlashVars();// load flash vars passed through HTML page			setupImage();// load image			setupStage();// setup stage for Full screen mode			setupInterface();		}		private function securitySandbox()		{			Security.loadPolicyFile('http://ddpuuwqw7k32q.cloudfront.net/crossdomain.xml');			Security.allowDomain("http://ddpuuwqw7k32q.cloudfront.net/", "http://preview.amaze.com/", "http://www.bit-fusion.co.uk/");			Security.allowInsecureDomain("http://ddpuuwqw7k32q.cloudfront.net/", "http://preview.amaze.com/", "http://www.bit-fusion.co.uk/");			loaderContext= new LoaderContext();			loaderContext.checkPolicyFile = true;			loaderContext.applicationDomain = ApplicationDomain.currentDomain;		}		private function loadFlashVars()		{			if (root.loaderInfo.parameters["flvURL"] != null)				_flvURL = root.loaderInfo.parameters["flvURL"];			else				_flvURL = "assets/flv/test.flv";							if (root.loaderInfo.parameters["imageURL"] != null)				_imageURL = root.loaderInfo.parameters["imageURL"];			else				_imageURL = "assets/images/test.png";			if (root.loaderInfo.parameters["name"] != null)				_nam = root.loaderInfo.parameters["name"];			else				_nam = "Mr Test";							if (root.loaderInfo.parameters["email"] != null)				_email = root.loaderInfo.parameters["email"];			else				_email = "test@test.co.uk";							if (root.loaderInfo.parameters["hotelDomain"] != null)				_hotelDomain = root.loaderInfo.parameters["hotelDomain"];			else				_hotelDomain = "http://www.bw-isite.co.uk/sendvideo.aspx";							if (root.loaderInfo.parameters["duration"] != null)				_duration = root.loaderInfo.parameters["duration"];			else				_duration = 553326;							if (root.loaderInfo.parameters["vWidth"] != null)				_width = root.loaderInfo.parameters["vWidth"];			else				_width = 240;						if (root.loaderInfo.parameters["vHeight"] != null)				_height = root.loaderInfo.parameters["vHeight"];			else				_height = 260;		}		private function setupStage()		{			stage.scaleMode= StageScaleMode.NO_SCALE;			stage.align= StageAlign.TOP_LEFT;			stage.addEventListener(FullScreenEvent.FULL_SCREEN, onFullscreen);		}		private function setupImage()		{			var loader:Loader = new Loader  ;			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, displayImage);			loader.load(new URLRequest(_imageURL), loaderContext);		}		private function ioErrorHandler(event:IOErrorEvent):void		{			trace("There is an Error is here: " + event);		}		private function displayImage(e:Event)		{			Container.getInstance().addChild(e.target.content);			setupVideoPlayer();			Container.getInstance().showHide(true);			Container.getInstance().resize(0,0,_width,_height);		}		private function setupInterface()		{			Container.getInstance().x = 0;			Container.getInstance().y = 0;			addChild(Container.getInstance());			videoControls = Transporter.getInstance();			adjustTransporter();			addChild(videoControls);		}		private function setupVideoPlayer()		{			VideoPlayer.getInstance().video();			VideoPlayer.getInstance().videoDimensions(0,0,_width,_height);			videoContainer.addChild(VideoPlayer.getInstance());			videoControls.playButtonState();			VideoPlayer.getInstance().displayTotalTime(_duration/1000);		}		public function onFullScreenClicked()		{			if (this.stage.displayState == StageDisplayState.FULL_SCREEN)				this.stage.displayState = StageDisplayState.NORMAL;			else				this.stage.displayState = StageDisplayState.FULL_SCREEN;		}		public function onFullscreen(e:FullScreenEvent = null):void		{			if (e.fullScreen)			{				_fullScreen = true;				videoControls.x = 0				videoControls.y = (Capabilities.screenResolutionY - 142);				videoControls.videoControlsBg.width = stage.stageWidth;				videoControls.mcFeatures.x = stage.stageWidth - 48;				videoControls._muteButton.x = stage.stageWidth - 96;				videoControls.lblTotalTimeDuration.x = stage.stageWidth - 142;				VideoPlayer.getInstance().resizeProgressBar(stage.stageWidth - 300);				VideoPlayer.getInstance().videoDimensions(0, 0, stage.fullScreenWidth, stage.fullScreenHeight);								videoControls.mcFeatures.closePanel();				checkImage();			}			else			{				_fullScreen = false;				videoControls.x = 0;				VideoPlayer.getInstance().videoDimensions(0, 0, _width, _height);				videoControls.videoControlsBg.width = stage.stageWidth;				videoControls.y = stage.stageHeight - 142;				videoControls.mcFeatures.x = stage.stageWidth - 48;				videoControls._muteButton.x = stage.stageWidth - 96;				videoControls.lblTotalTimeDuration.x = stage.stageWidth - 142;				VideoPlayer.getInstance().resizeProgressBar(stage.stageWidth - 300);				checkImage();				videoControls.mcFeatures.closePanel();								if (this.getChildByName("email" != null))				{					if (this.contains(this.getChildByName("email")))					{						this.getChildByName("email").x = (stage.stageWidth - 265) / 2;				        this.getChildByName("email").y = (stage.stageHeight - 140) / 2;					}				}				else				{					trace("No email created");				}			}		}				public function disableInterface()		{			if (Container.getInstance().isShowing())			{				Container.getInstance().alpha = 0.4;				VideoPlayer.getInstance().videoDisabled(true);			}			videoControls.mcFeatures.closePanel();			videoControls.mouseEnabled = false;			videoControls.mouseChildren = false;			VideoPlayer.getInstance().disableVideo();		}		public function enableInterface()		{			videoControls.mouseEnabled = true;			videoControls.mouseChildren = true;			if (Container.getInstance().isShowing())			{				Container.getInstance().alpha = 1;				VideoPlayer.getInstance().videoDisabled(true);			}			else			{				VideoPlayer.getInstance().enableVideo();				VideoPlayer.getInstance().videoDisabled(false);			}			this.removeChild(this.getChildByName("email"));		}		public function addEmailToStage()		{			if (_fullScreen)			{				var obj:Object = this.getChildByName("email");				if (obj != null)					obj.showError();									this.getChildByName("email").x = (Capabilities.screenResolutionX - 265) / 2;				this.getChildByName("email").y = (Capabilities.screenResolutionY - 140) / 2;			}			else			{				//this.getChildByName("email").x = 187.5;				//this.getChildByName("email").y = 110;				this.getChildByName("email").x = (stage.stageWidth - 265) / 2;				this.getChildByName("email").y = (stage.stageHeight - 140) / 2;			}		}		public function checkImage():void		{			if (_fullScreen)				Container.getInstance().resize(0,0,stage.fullScreenWidth, stage.fullScreenHeight);			else				Container.getInstance().resize(0,0,_width,_height);		}				public function adjustTransporter() {					videoControls.x = 0;			videoControls.y = stage.stageHeight - 142;			videoControls.videoControlsBg.width = stage.stageWidth;			//	videoControls.videoControlsBg.width = stage.stageWidth;								videoControls.mcFeatures.x = stage.stageWidth - 48;				videoControls._muteButton.x = stage.stageWidth - 96;				videoControls.lblTotalTimeDuration.x = stage.stageWidth - 142;				VideoPlayer.getInstance().resizeProgressBar(stage.stageWidth - 300);				}		public function get nam():String		{			return _nam;		}		public function get email():String		{			return _email;		}		public function get hotelDomain():String		{			return _hotelDomain;		}		public function playVideo()		{			VideoPlayer.getInstance().playVideo(_flvURL);		}	}}