package src{	import flash.display.*;	import flash.events.Event;	import flash.net.URLRequest;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	/* This class holds the glabal properties which the developer 	can check to determine if specific button or container was clicked	previously by the user.	*/	public class Global extends Sprite	{		private static  var __instance:Global;		private var _playing:String;		private var _endTimerStarted = false;		private var _hideValue:Number = 256;		private var _showValue:Number = 233;		private  var _playlistArray:Array = new Array;		private var _playlistNumber:Number = 0;		private var _upperLimit:Number = 0;		private var _loader:Loader;		private var _loaded:Boolean;		private var mc:MovieClip;		private var _previousVideo:String = "";		public function Global(singletonEnforcer:SingletonEnforcer)		{			loadEndFrame();		}		public static function getInstance():Global		{			if (Global.__instance == null)			{				Global.__instance=new Global(new SingletonEnforcer);			}			return Global.__instance;		}		public function clearInterface()		{		}		public function showNavigation()		{		}		public function hideNavigation()		{		}		private function loadEndFrame()		{			_loader = new Loader();			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);			_loader.load(new URLRequest("http://209.162.178.214/ow/global/UCApplication/assets/swf/endframe.swf"));		}		public function setPlaying(val:String)		{			_playing = val.toLowerCase();		}		public function getPlaying():String		{			return _playing;		}		public function playVideo(url:String)		{			VideoPlayer.getInstance().playVideo(url);			VideoPlayer.getInstance().addEventListener(CustomVideoEvent.VIDEO_FINISHED, onVideoFinished);		}		public function initializePlayList(playlist:Array)		{			setPlaying("keyfeatures");			for(var k:int ; k< playlist.length; k++)			{			_playlistArray.push(playlist[k]);			}			trace("The playList is given as" + _playlistArray)			_upperLimit = _playlistArray.length;			playList();		}				public function playList()		{			if(_playlistNumber < _upperLimit)			{			playVideo(_playlistArray[_playlistNumber].videoURL);			trace("The URL FOR THE VIDEO IS " + _playlistArray[_playlistNumber].videoURL);			}			else			{			playOutro();			}					}				private function playOutro()		{			ButtonManager.getInstance().customButtonClick(2);		}		private function onComplete(event:Event)		{			_loaded = true;		    mc = new MovieClip;			mc = MovieClip(_loader.content);		    			//_mc = 		}				private function onVideoFinished(event:CustomVideoEvent):void		{			switch(_playing)			{				case "introduction":				trace("load Key features");				ButtonManager.getInstance().customButtonClick(1);				break;				case "keyfeatures":				trace("load bussiness beneits");				_playlistNumber+=1;				playList();				break;				case "outro":				trace("Outro Finsihed");				VideoPlayer.getInstance().stopStream();				if(_loaded)				{				mc.gotoAndStop(1);				mc.gotoAndPlay(3);				SWFContainer.getInstance().addDisplayObject(mc);				trace("loaded");				}				break;			}		}		public function clearPlaylist()		{			_playlistNumber = 0;			_playlistArray.splice(0,_playlistArray.length)		}				public function sendTracking(tracking:String)		{			//_tracking += tracking;						ExternalInterface.call("pageTracker._trackPageview", "/videos/ow/global/UCApplication/" + tracking); 			trace("/videos/ow/global/UCApplication/" + tracking);		}	}// end of class}// end of packageclass SingletonEnforcer{}