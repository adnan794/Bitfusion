package src{	//import caurina.transitions.*;	import flash.display.*;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.net.URLRequestMethod;	public class Email extends MovieClip	{		private var _panelOpen:Boolean = false;		private var _timer:Timer;		public function Email()		{			trace("Email Created");			_timer = new Timer(4000);			this.addEventListener(Event.ADDED_TO_STAGE, onAdded);			btnSubmit.addEventListener(MouseEvent.CLICK, onSubmit);			btnSubmit.txtSubmit.mouseEnabled = false;		}		private function onSubmit(e:MouseEvent)		{			if (txtName.text == "" || txtEmail.text == "")			{				errorText.visible = true;			}			else			{				sendDetails();			}		}		private function sendDetails()		{			this.gotoAndStop(2);			_timer.addEventListener(TimerEvent.TIMER, onTimer);			_timer.start();			Application(this.root.loaderInfo.content).disableInterface();			var vars:URLVariables = new URLVariables();			vars.nam = txtName.text;			vars.email = txtEmail.text;			var loader:URLLoader = new URLLoader();			loader.addEventListener( Event.COMPLETE, onSent );			var req:URLRequest = new URLRequest(Application(this.root.loaderInfo.content).hotelDomain);			req.data = vars;			req.method = URLRequestMethod.POST;			try			{				loader.load( req );			}			catch (error)			{				trace("there is an Error " + error);			}		}				private function onSent(e:Event)		{			trace("Sent completed: " + e);					}		private function onTimer(e:TimerEvent)		{			_timer.stop();			_timer.removeEventListener(TimerEvent.TIMER, onTimer);			Application(this.root.loaderInfo.content).enableInterface();		}		private function onAdded(e:Event)		{			//this.addEventListener(Event.REMOVED_FROM_STAGE, onRemoved);			this.gotoAndStop(1);			errorText.visible = false;			btnSubmit.addEventListener(MouseEvent.CLICK, onSubmit);			btnSubmit.txtSubmit.mouseEnabled = false;			txtName.text = Application(this.root.loaderInfo.content).nam;			txtEmail.text = Application(this.root.loaderInfo.content).email;						txtName.addEventListener( FocusEvent.FOCUS_IN, textFocusIn );			txtName.addEventListener( FocusEvent.FOCUS_OUT, textFocusOut );			txtEmail.addEventListener( FocusEvent.FOCUS_IN, textFocusIn );			txtEmail.addEventListener( FocusEvent.FOCUS_OUT, textFocusOut );		}		private function textFocusIn(e:Event)		{			e.target.text = "";			trace("Focus In: " + e.target.name);		}		private function textFocusOut(e:Event)		{			trace("Focus out of: " + e.target.name);		}		public function showError()		{			this.gotoAndStop(3);			_timer.addEventListener(TimerEvent.TIMER, onError);			_timer.start();		}		private function onError(e:TimerEvent)		{			_timer.stop();			_timer.removeEventListener(TimerEvent.TIMER, onError);			Application(this.root.loaderInfo.content).enableInterface();		}	}}